25.10.2016

Описание работы программы:

1) Программа mainWindowSlider создает общее окно, в которое вставляются отдельные виджеты.
2) Подключение подпрограмм будет производиться автоматически, либо с помощью кнопки меню "Добавить прибор" - СДЕЛАТЬ
3) Что должно входить в каждую из программ:
    а) Конструктор класса, наследующий класс QWidget. Он может принимать следующие аргументы:
        parent=self, globals=self.globals, all_updates_methods=self.all_updates_methods
        parent - класс объемлющего виджета, в нашем случае основное окно программы; нужно для создания ГУИ и
                иногда для обращения напрямую к атрибутам родителя (надо стараться этого избегать
        globals - глобальные переменные, которые может редактировать (или доступиться) любая подпрограммма; нажны
                для хранения параметров скана, имен папок, флагов и т.п., от чего зависить работа отдельных узлов
        all_updates_methods - словарь типа  'имя подпрограммы': "метод обновления", нужен для непосредственного
                вызова обновления некоторых переменных в подпрограмме, в частности, чтобы программа сканирования
                Scanner его вызвала при сканировании параметра.
    б) У каждой подпрограммы должен быть реализован метод getUpdateMethod(), который будет возвращать метод обновления,
                о котором говорилось выше

4) Каждая подпрограмма должна сообщать с помощью специального сигнала о произошедшем изменении, если ожидается, что
    другая подпрограмма может этим воспользоваться. Думаю пока данные будем передавать через глобальные переменные.
    В частности, когда поступило новое изображение, подпрограмма, считывающая его, посылает сигнал, что появились новые
    данные, а уже другие программы его выводят на экран, обрабатывают и обновляют графики
    Или когда происходит изменение импульсов, то посылается соответствующий сигнал, который перехватывает программа
    построения графика импульсов

5) Если программа хочет привязать какой либо слот к какому либо сигналу, то код в ее конструкторе должен выглядеть
    примерно так:
        if 'Signals' in self.globals and 'Pulses' in self.globals['Signals']:
            self.globals['Signals']['Pulses']['onAnyChange'].connect(self.updatePlot)
        else:
            self.parent.slots_to_bound.append(lambda : self.globals['Signals']['Pulses']['onAnyChange'].connect(self.updatePlot))
        self.updatePlot()
    здесь в 1ой строке, проверяется, есть ли нужный сигнал в словаре сигналов self.globals['Signals'] (в глобальных переменных),
    если есть, то присоединяется обработчик.
    Если сигнала пока нет (а может и не будет, если соответствующая программа не запустилась), то в список self.parent.slots_to_bound
    записывается функция, которая будет вызвана после инициализации всех подпрограмм и попытается связать слот с сигналом.
    НАДО ПОДУМАТЬ, что делать, если так и не получится связать
